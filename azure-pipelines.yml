# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a075c133-83b5-4c90-818e-8cf0a0a8d6da'
  imageRepository: 'mspreagendamiento'
  containerRegistry: 'preagendamiento.azurecr.io'
  dockerfilePath: '**/ms-pre-agendamiento/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'preagendamiento1872da65-auth'


  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.sourceBranch)'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - publish: ms-pre-agendamiento/manifests
      artifact: manifests

- stage: Deploy_Dev
  displayName: Deploy Dev
  dependsOn: Build
  variables:
  - group: dev-variable-group
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'dev-ms-pre-agendamiento.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: CmdLine@2
            displayName: Get secrets
            inputs:
              script: |
                sed -i "s/\${ConnectionStrings}/$(ConnectionStrings)/" $(Pipeline.Workspace)/manifests/deployment.yml
                sed -i "s/\${Env}/Development/" $(Pipeline.Workspace)/manifests/deployment.yml
                sed -i "s/\${appConfiguration}/$(appConfiguration)/" $(Pipeline.Workspace)/manifests/deployment.yml
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
- stage: Deploy_Production
  displayName: Deploy Production
  dependsOn: Deploy_Dev
  variables:
  - group: production-variable-group
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'production-ms-pre-agendamiento.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: CmdLine@2
            displayName: Get secrets
            inputs:
              script: |
                sed -i "s/\${ConnectionStrings}/$(ConnectionStrings)/" $(Pipeline.Workspace)/manifests/deployment.yml
                sed -i "s/\${Env}/Production/" $(Pipeline.Workspace)/manifests/deployment.yml
                sed -i "s/\${appConfiguration}/$(appConfiguration)/" $(Pipeline.Workspace)/manifests/deployment.yml
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)